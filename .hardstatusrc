require 'json'
require 'timeout'

left  '#{start}#{irssi}#{email}#{hackers}'
right '#{wireless}#{sound}#{processor}#{temperature}#{battery}#{time}'

def wrap (string)
	"\005{= 1}[\005{+b 15}#{string}\005{-}\005{1}] "
end

backtick :start, every: 5.hours do
	wrap "\005{0;15}／人\005{1;15}◕\005{0;15} ‿‿ \005{1;15}◕\005{0;15}人＼"
end

backtick :irssi, every: second do
	notifications = File.read(File.expand_path('~/.irssi/notifications')).gsub(':', '@').split(/, /)

	unless notifications.empty?
		wrap "\005{-}\005{15}# " + notifications.map {|n|
			"\005{b15;1}#{n}\005{-}\005{dd}"
		}.join(' ')
	end
end

backtick :email, every: second do
	unless `ps aux | grep fetchmail | rg -v "grep|postino"`.strip.empty?
		next wrap "\u{E0ED} \005{b15}..."
	end

	notifications = JSON.parse(File.read(File.expand_path('~/.mutt/state')))
		.select {|path, _|
			ENV['POSTINO'].split(/\s*;\s*/).include?(File.basename(path)) }
		.select {|_, state|
			state['total'] != state['seen'] }
		.map {|path, _|
			File.basename(path) }

	unless notifications.empty?
		wrap "\u{E0ED} " + notifications.map {|name|
			"\005{b15;1}#{name}\005{-}"
		}.join(' ')
	end
end

backtick :hackers, every: 5.seconds do
end

backtick :sound, every: 1.seconds do
	out  = `pacmd list-sinks`
	sink = out.split(/^  [ *] /)[1 .. -1][out.match(/^  \* .*?(\d+)/)[1].to_i]

	icon = if sink.match(/muted: (yes|no)/)[1] == "yes"
		"\u{E0EC}"
	else
		"\u{E0EB}"
	end

	wrap "#{icon} #{sink.match(/volume: .*?(\d+%)/)[1]}"
end

backtick :processor, every: 5.seconds do
	freq = `cpupower frequency-info`.match(/current CPU frequency: (\d+(\.\d+)? .Hz)/)[1]

	wrap "\u{E0EA} #{freq}"
end

backtick :temperature, every: 5.seconds do
	`sensors`.match(/CPU:\s+\+([\d\-.]+)/) { |m|
		temp = m[1].to_i

		wrap(if temp >= 100
			'STACCA STACCA STACC-'
		else
			"\u{E0E9} #{temp}°"
		end)
	}
end

backtick :wireless, every: 5.seconds do
	state = `iw dev wlp2s0 link`

	next unless state =~ /^Connected to /

	essid  = state.match(/SSID: (.*?)$/)[1].gsub(/\\x([0-9a-fA-F][0-9a-fA-F])/) { |s| s[2..-1].to_i(16).chr }
	signal = state.match(/signal: (.*?) dBm/)[1].to_i
	state  = if signal >= -44
		"\u{E0E6}"
	elsif signal >= -67
		"\u{E0E7}"
	else
		"\u{E0E8}"
	end

	if signal
		wrap "#{state} #{essid}"
	end
end

backtick :battery, every: 5.seconds do
	state = `upower -i /org/freedesktop/UPower/devices/battery_BAT0`

	next if state =~ /percentage:\s*100%/

	percentage = state.match(/percentage:\s*(\d+)%/)[1].to_i

	if remaining = state.match(/time to empty:\s*([^\s].+)$/)[1] rescue nil
		state = if percentage <= 15
			"\005{-b 15;1}\u{E0E5}"
		elsif percentage <= 20
			"\005{-b 15}\u{E0E5}"
		elsif percentage <= 40
			"\005{-b 15}\u{E0E4}"
		elsif percentage <= 60
			"\005{-b 15}\u{E0E3}"
		elsif percentage <= 80
			"\005{-b 15}\u{E0E2}"
		else
			"\005{-b 15}\u{E0E1}"
		end

		wrap "\005{-}#{state}\005{b15} #{remaining}"
	else
		wrap "\005{-}\005{15}\u{E0E0}\005{b15} #{percentage}%"
	end
end

backtick :time, every: second do
	now   = Time.now
	style = ''

	if now.sec % 10 >= 5
		now   = now.utc - (4 * 60 * 60)
		style = "\005{ub15}"
	end

	wrap(style + now.strftime('%a %Y-%m-%d %T')).rstrip
end
